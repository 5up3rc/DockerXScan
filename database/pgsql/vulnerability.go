package pgsql

import (
	"github.com/MXi4oyu/DockerXScan/database"
	"github.com/MXi4oyu/DockerXScan/common/commonerr"
)

//列出漏洞
func (pgSQL *pgSQL) ListVulnerabilities(namespaceName string, limit int, startID int) ([]database.Vulnerability, int, error) {

	// Query Namespace.
	var id int
	err := pgSQL.QueryRow(searchNamespace, namespaceName).Scan(&id)
	if err != nil {
		return nil, -1, handleError("searchNamespace", err)
	} else if id == 0 {
		return nil, -1, commonerr.ErrNotFound
	}

	// Query.
	query := searchVulnerabilityBase + searchVulnerabilityByNamespace
	rows, err := pgSQL.Query(query, namespaceName, startID, limit+1)
	if err != nil {
		return nil, -1, handleError("searchVulnerabilityByNamespace", err)
	}
	defer rows.Close()

	var vulns []database.Vulnerability
	nextID := -1
	size := 0
	// Scan query.
	for rows.Next() {
		var vulnerability database.Vulnerability

		err := rows.Scan(
			&vulnerability.ID,
			&vulnerability.Name,
			&vulnerability.Namespace.ID,
			&vulnerability.Namespace.Name,
			&vulnerability.Namespace.VersionFormat,
			&vulnerability.Description,
			&vulnerability.Link,
			&vulnerability.Severity,
			&vulnerability.Metadata,
		)
		if err != nil {
			return nil, -1, handleError("searchVulnerabilityByNamespace.Scan()", err)
		}
		size++
		if size > limit {
			nextID = vulnerability.ID
		} else {
			vulns = append(vulns, vulnerability)
		}
	}

	if err := rows.Err(); err != nil {
		return nil, -1, handleError("searchVulnerabilityByNamespace.Rows()", err)
	}

	return vulns, nextID, nil
}

